/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package demo

import org.apache.commons.io.FileUtils;

import groovy.transform.CompileStatic

import java.nio.file.Files
import java.nio.file.Path

@CompileStatic
class App {

    static day7BuildDirs() {
        new File("./aoc").deleteDir()

        new File("./aoc").mkdir()
        Files.lines(Path.of("input7.txt"))
                .skip(1)
                .forEach { line ->
                    {
                        findCommand(line)
                    }
                }
    }

    static void main(String[] args) {
        println "Groovy"
        if (System.getenv("part") == "part1") {
            day7BuildDirs()
            currentDir = "./aoc"
            println part1()
        } else {
            day7BuildDirs()
            currentDir = "./aoc"
            println part2()
        }
    }
    public static String currentDir = "./aoc"
    public static boolean writeMode = false

    static String part1() {
        def sum = 0

        Files.walk(Path.of(currentDir))
                .forEach { path ->
                    {
                        if (path.toFile().isDirectory()) {
                            def size = FileUtils.sizeOfDirectory(path.toFile())
                            if (size <= 100000) sum += size
                        }
                    }
                }
        return sum.toString()
    }

    static String part2() {
        def totalSpace = 70000000
        def needSpace = 30000000
        def usedSpace = FileUtils.sizeOfDirectory(new File(currentDir))
        def currentSpace = totalSpace - usedSpace
        def list = [] as ArrayList<Integer>
        Files.walk(Path.of(currentDir))
                .forEach { path ->
                    {
                        if (path.toFile().isDirectory()) {
                            int size = (int) FileUtils.sizeOfDirectory(path.toFile())
                            if (currentSpace + size >= needSpace) list.add(size)
                        }
                    }
                }
        return list.sort()[0].toString()
    }


    static void findCommand(String s) {
        if (s.startsWith("\$ cd")) {
            if (s.contains("..")) {
                currentDir = currentDir.substring(0, currentDir.lastIndexOf("/"))
            } else {
                currentDir = String.format("%s/%s", currentDir, s.split(" ")[2])
            }
            writeMode = false
        }
        if (s.contains("\$")) {
            writeMode = false
        }
        if (writeMode) {
            if (s.contains("dir")) {
                new File(String.format("%s/%s", currentDir, s.split(" ")[1])).mkdir()
            } else {
                def file = new File(String.format("%s/%s_%s", currentDir, s.split(" ")[0], s.split(" ")[1]))
                FileOutputStream fos = new FileOutputStream(file)
                Random rd = new Random();
                byte[] arr = new byte[s.split(" ")[0].toInteger()];
                rd.nextBytes(arr);
                fos.write(arr)
                fos.close()
            }
        }
        if (s.contains("ls")) {
            writeMode = true
        }
    }
}


